{"version":3,"sources":["../src/at-angular-resource.ts"],"names":[],"mappings":";;;;;;;;;IAAA,QAAO,kBAAkB,CAAC,CAAA;IAI1B,2BAA4B,cAAc,CAAC,CAAA;IAK3C,yBAAyB,QAAa,EAAE,KAAW;QACjD,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED,0BAA0B;IAC1B;QAgBE,sBAAY,KAAW;YACrB,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC/B,CAAC;QACH,mBAAC;IAAD,CAnBA,AAmBC,IAAA;IAnBY,oBAAY,eAmBxB,CAAA;IAED,0BAA0B;IAC1B;QAAwC,sCAAY;QAKlD,4BAAY,KAAW;YACrB,kBAAM,KAAK,CAAC,CAAC;QACf,CAAC;QACH,yBAAC;IAAD,CARA,AAQC,CARuC,YAAY,GAQnD;IARY,0BAAkB,qBAQ9B,CAAA;IAED;QACE,MAAM,CAAC,UAAC,MAAW;YACjB,8BAA8B,SAA2B;gBAAE,cAAc;qBAAd,WAAc,CAAd,sBAAc,CAAd,IAAc;oBAAd,6BAAc;;gBACvE,IAAM,WAAW,GAAwB,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;gBAC9G,MAAM,CAAC,0BAAa,gBAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,EAAE;oBACnF,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE;wBAChF,kCAAkC;wBAClC,UAAU,EAAE,WAAW;qBAExB,CAAC,CAAC;iBACJ,CAAC,CAAC,SAAK,IAAI,EAAC,CAAC;YAChB,CAAC;YAED,oBAAoB,CAAC,OAAO,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,0BAA0B,IAAI,EAAE,CAAC,CAAC;YACvG,MAAM,CAAC,WAAW,GAAG,UAAC,MAAe;gBACnC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;YACpD,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IAlBe,gBAAQ,WAkBvB,CAAA","file":"at-angular-resource.js","sourcesContent":["import 'angular-resource';\nimport IPromise = angular.IPromise;\nimport IResourceArray = angular.resource.IResourceArray;\nimport IResource = angular.resource.IResource;\nimport {attachInjects} from './at-angular';\nimport IModule = angular.IModule;\nimport IResourceService = angular.resource.IResourceService;\nimport IResourceClass = angular.resource.IResourceClass;\n\nfunction combineResource(instance: any, model?: any): void {\n  angular.extend(instance, new instance.$_Resource(model));\n}\n\n/* istanbul ignore next */\nexport class BaseResource implements IResource<BaseResource> {\n  static get: (params?: Object) => BaseResource;\n  static query: (params?: Object) => IResourceArray<any>;\n  static remove: () => BaseResource;\n  static save: () => BaseResource;\n  static delete: () => BaseResource;\n  $get: (params?: Object) => IPromise<this>;\n  $query: (params?: Object) => IPromise<IResourceArray<this>>;\n  $remove: (params?: Object) => IPromise<this>;\n  $save: (params?: Object) => IPromise<this>;\n  $delete: (params?: Object) => IPromise<this>;\n  $promise: IPromise<this>;\n  $resolved: boolean;\n  $cancelRequest: () => void;\n  toJSON: () => this;\n\n  constructor(model?: any) {\n    combineResource(this, model);\n  }\n}\n\n/* istanbul ignore next */\nexport class ResourceWithUpdate extends BaseResource {\n  static update: () => ResourceWithUpdate;\n  $update: () => IPromise<this>;\n  $promise: IPromise<this>;\n\n  constructor(model?: any) {\n    super(model);\n  }\n}\n\nexport function Resource() {\n  return (target: any): void => {\n    function resourceClassFactory($resource: IResourceService, ...args: any[]): any {\n      const newResource: IResourceClass<any> = $resource(target.url, target.params, target.actions, target.options);\n      return attachInjects(angular.extend(newResource, angular.extend(target, newResource, {\n        prototype: angular.extend(newResource.prototype, angular.extend(target.prototype, {\n          /* tslint:disable:variable-name */\n          $_Resource: newResource\n          /* tslint:enable:variable-name */\n        }))\n      })), ...args);\n    }\n\n    resourceClassFactory.$inject = (['$resource']).concat(target.$inject /* istanbul ignore next */ || []);\n    target.__$$declare = (module: IModule) => {\n      module.factory(target.name, resourceClassFactory);\n    };\n  };\n}\n"],"sourceRoot":" "}