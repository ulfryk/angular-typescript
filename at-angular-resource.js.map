{"version":3,"sources":["../at-angular-resource.ts"],"names":[],"mappings":"AAAA,0BAA0B;AAE1B,IAAO,EAAE,CAkER;AAlED,WAAO,EAAE,EAAC,CAAC;IAEP,YAAY,CAAC;IAUb,0BAA0B;IAC1B,yBAAyB,QAAa,EAAE,KAAW;QAC/C,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED,0BAA0B;IAC1B;QAeI,kBAAY,KAAW;YAAI,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAAC,CAAC;QAC9D,eAAC;IAAD,CAhBA,AAgBC,IAAA;IAhBY,WAAQ,WAgBpB,CAAA;IAED,0BAA0B;IAC1B;QAAwC,sCAAQ;QAI5C,4BAAY,KAAW;YAAI,kBAAM,KAAK,CAAC,CAAC;QAAC,CAAC;QAC9C,yBAAC;IAAD,CALA,AAKC,CALuC,QAAQ,GAK/C;IALY,qBAAkB,qBAK9B,CAAA;IAMD,kBAAyB,UAAkB,EAAE,SAAiB;QAC1D,MAAM,CAAC,UAAC,MAAW;YACf,8BAA8B,SAA0B;gBAAE,cAAc;qBAAd,WAAc,CAAd,sBAAc,CAAd,IAAc;oBAAd,6BAAc;;gBACpE,IAAM,WAAW,GAAkB,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;gBACxG,MAAM,CAAC,gBAAa,gBAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,EAAE;oBACjF,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE;wBAC9E,kCAAkC;wBAClC,UAAU,EAAE,WAAW;qBAE1B,CAAC,CAAC;iBACN,CAAC,CAAC,SAAK,IAAI,EAAC,CAAC;YAClB,CAAC;YACD,oBAAoB,CAAC,OAAO,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,0BAA0B,IAAI,EAAE,CAAC,CAAC;YACvG,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC;QACxE,CAAC,CAAC;IACN,CAAC;IAfe,WAAQ,WAevB,CAAA;AAGL,CAAC,EAlEM,EAAE,KAAF,EAAE,QAkER","file":"at-angular-resource.js","sourcesContent":["/* istanbul ignore next */\n\nmodule at {\n\n    'use strict';\n    import IPromise = angular.IPromise;\n    import IResourceArray = angular.resource.IResourceArray;\n    import IResource = angular.resource.IResource;\n\n    /* tslint:disable:no-any */\n    type ResourceClass = angular.resource.IResourceClass<any>;\n    type ResourceArray = angular.resource.IResourceArray<any>;\n    type ResourceService = angular.resource.IResourceService;\n\n    /* istanbul ignore next */\n    function combineResource(instance: any, model?: any): void {\n        angular.extend(instance, new instance.$_Resource(model));\n    }\n\n    /* istanbul ignore next */\n    export class Resource implements IResource<Resource> {\n        static get: (params?: Object) => Resource;\n        static query: (params?: Object) => ResourceArray;\n        static remove: () => Resource;\n        static save: () => Resource;\n        static delete: () => Resource;\n        $get: (params?: Object) => IPromise<this>;\n        $query: (params?: Object) => IPromise<IResourceArray<this>>;\n        $remove: (params?: Object) => IPromise<this>;\n        $save: (params?: Object) => IPromise<this>;\n        $delete: (params?: Object) => IPromise<this>;\n        $promise: IPromise<this>;\n        $resolved: boolean;\n        $cancelRequest: () => void;\n        toJSON: () => this;\n        constructor(model?: any) { combineResource(this, model); }\n    }\n\n    /* istanbul ignore next */\n    export class ResourceWithUpdate extends Resource  {\n        static update: () => ResourceWithUpdate;\n        $update: () => IPromise<this>;\n        $promise : IPromise<this>;\n        constructor(model?: any) { super(model); }\n    }\n\n    export interface IResourceAnnotation {\n        (moduleName: string, className: string): IClassAnnotationDecorator;\n    }\n\n    export function resource(moduleName: string, className: string): IClassAnnotationDecorator {\n        return (target: any): void => {\n            function resourceClassFactory($resource: ResourceService, ...args: any[]): any {\n                const newResource: ResourceClass = $resource(target.url, target.params, target.actions, target.options);\n                return attachInjects(angular.extend(newResource, angular.extend(target, newResource, {\n                    prototype: angular.extend(newResource.prototype, angular.extend(target.prototype, {\n                        /* tslint:disable:variable-name */\n                        $_Resource: newResource\n                        /* tslint:enable:variable-name */\n                    }))\n                })), ...args);\n            }\n            resourceClassFactory.$inject = (['$resource']).concat(target.$inject /* istanbul ignore next */ || []);\n            angular.module(moduleName).factory(className, resourceClassFactory);\n        };\n    }\n    /* tslint:enable:no-any */\n\n}\n"],"sourceRoot":" "}